// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectBussiness;

#nullable disable

namespace ObjectBussiness.Migrations
{
    [DbContext(typeof(PetroleumBusinessDBContext))]
    partial class PetroleumBusinessDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ExamRegisterID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.HasIndex("ExamRegisterID")
                        .IsUnique();

                    b.HasIndex("TestID")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ObjectBussiness.Candidate", b =>
                {
                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateID");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("ObjectBussiness.Decentralization", b =>
                {
                    b.Property<int>("DecentralizationID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoleGrantDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("DecentralizationID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Decentralizations");
                });

            modelBuilder.Entity("ObjectBussiness.Elect", b =>
                {
                    b.Property<int>("ElectID")
                        .HasColumnType("int");

                    b.Property<bool>("ResultElect")
                        .HasColumnType("bit");

                    b.Property<int>("ResultOfCandidateID")
                        .HasColumnType("int");

                    b.HasKey("ElectID");

                    b.HasIndex("ResultOfCandidateID")
                        .IsUnique();

                    b.ToTable("Elects");
                });

            modelBuilder.Entity("ObjectBussiness.ExamRegister", b =>
                {
                    b.Property<int>("ExamRegisterID")
                        .HasColumnType("int");

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.HasKey("ExamRegisterID");

                    b.HasIndex("CandidateID")
                        .IsUnique();

                    b.ToTable("ExamRegister");
                });

            modelBuilder.Entity("ObjectBussiness.News", b =>
                {
                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsID");

                    b.HasIndex("AccountID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ObjectBussiness.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("TestID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ObjectBussiness.ResultOfCandidate", b =>
                {
                    b.Property<int>("ResultOfCandidateID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("ResultOfCandidateID");

                    b.HasIndex("TestID")
                        .IsUnique();

                    b.ToTable("ResultOfCandidates");
                });

            modelBuilder.Entity("ObjectBussiness.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Candidate"
                        });
                });

            modelBuilder.Entity("ObjectBussiness.Round", b =>
                {
                    b.Property<int>("RoundID")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("RoundID");

                    b.HasIndex("TestID");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("ObjectBussiness.Test", b =>
                {
                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreateTest")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDay")
                        .HasColumnType("datetime2");

                    b.HasKey("TestID");

                    b.ToTable("Testes");
                });

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.HasOne("ObjectBussiness.ExamRegister", "ExamRegister")
                        .WithOne("Account")
                        .HasForeignKey("ObjectBussiness.Account", "ExamRegisterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.Test", "Test")
                        .WithOne("Account")
                        .HasForeignKey("ObjectBussiness.Account", "TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamRegister");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ObjectBussiness.Decentralization", b =>
                {
                    b.HasOne("ObjectBussiness.Account", "Account")
                        .WithOne("Decentralization")
                        .HasForeignKey("ObjectBussiness.Decentralization", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.Role", "Role")
                        .WithMany("Decentralizations")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ObjectBussiness.Elect", b =>
                {
                    b.HasOne("ObjectBussiness.ResultOfCandidate", "ResultOfCandidate")
                        .WithOne("Elect")
                        .HasForeignKey("ObjectBussiness.Elect", "ResultOfCandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultOfCandidate");
                });

            modelBuilder.Entity("ObjectBussiness.ExamRegister", b =>
                {
                    b.HasOne("ObjectBussiness.Candidate", "Candidate")
                        .WithOne("ExamRegister")
                        .HasForeignKey("ObjectBussiness.ExamRegister", "CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("ObjectBussiness.News", b =>
                {
                    b.HasOne("ObjectBussiness.Account", "Account")
                        .WithMany("News")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ObjectBussiness.Question", b =>
                {
                    b.HasOne("ObjectBussiness.Test", "Test")
                        .WithMany("Question")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ObjectBussiness.ResultOfCandidate", b =>
                {
                    b.HasOne("ObjectBussiness.Test", "Test")
                        .WithOne("ResultOfCandidate")
                        .HasForeignKey("ObjectBussiness.ResultOfCandidate", "TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ObjectBussiness.Round", b =>
                {
                    b.HasOne("ObjectBussiness.Test", "Tests")
                        .WithMany("Round")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.Navigation("Decentralization");

                    b.Navigation("News");
                });

            modelBuilder.Entity("ObjectBussiness.Candidate", b =>
                {
                    b.Navigation("ExamRegister");
                });

            modelBuilder.Entity("ObjectBussiness.ExamRegister", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("ObjectBussiness.ResultOfCandidate", b =>
                {
                    b.Navigation("Elect");
                });

            modelBuilder.Entity("ObjectBussiness.Role", b =>
                {
                    b.Navigation("Decentralizations");
                });

            modelBuilder.Entity("ObjectBussiness.Test", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Question");

                    b.Navigation("ResultOfCandidate");

                    b.Navigation("Round");
                });
#pragma warning restore 612, 618
        }
    }
}
